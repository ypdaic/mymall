<?xml version="1.0" encoding="UTF-8"?>
<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <springProperty scope="context" name="contextName" source="spring.application.name" defaultValue="mymall"/>
    <contextName>${contextName}</contextName>
    <property name="log.path" value="logs"/>
    <!-- TRACE < DEBUG < INFO < WARN < ERROR 日志级别-->

    <!--文件输出的格式设置 -->
    <appender name="fileDebugLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件输出的日志 的格式 -->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [ %thread ] - [ %-5level ] [ %logger{96} : %line ] - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集，防止中文乱码 -->
        </encoder>

        <!--样例：-->
        <!--[ INFO ]     [2017-06-09 15:15:59]      org.apache.tomcat.util.net.NioSelectorPool [179] - Using a shared selector for servlet-->
        <!--[ %-5level]  [%date{yyyy-MM-dd HH:mm:ss}]  %logger{96}                             [%line]   %msg%n、-->
        <!--level日志级别  时间                          打印日志所处包.类                          出现代码行  日志信息-->
        <!--%logger{96}打印详细的包路径，%logger{36}三方包只打印首字母，%logger{16}本项目及三方包都只打印首字母-->


        <!-- 配置日志所生成的目录以及生成文件名的规则 在logs/mylog-2016-10-31.0.log -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${contextName}-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大10KB 超过最大值，会重新建一个文件-->
                <maxFileSize>10 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 -->
            <maxHistory>30</maxHistory>
            <!-- 日志总保存量为10MB 超过则删除-->
            <totalSizeCap>50 MB</totalSizeCap>

        </rollingPolicy>
        <!--<filter>:-->
        <!--过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。-->
        <!--过滤器被添加到<appender> 中，为<appender> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<appender> 有多个过滤器时，按照配置顺序执行。-->

        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印DEBUG日志 -->
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- Safely log to the same file from multiple JVMs. Degrades performance! -->
        <!--<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <prudent>false</prudent>

    </appender>

    <!--文件输出的格式设置 -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [ %thread ] - [ %-5level ] [ %logger{96} : %line ] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${contextName}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大10KB 超过最大值，会重新建一个文件-->
                <maxFileSize>10 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 -->
            <maxHistory>30</maxHistory>
            <!-- 日志总保存量为10MB 超过则删除-->
            <totalSizeCap>50 MB</totalSizeCap>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印DEBUG日志 -->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--文件输出的格式设置 -->
    <appender name="fileWarnLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [ %thread ] - [ %-5level ] [ %logger{96} : %line ] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${contextName}-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大10KB 超过最大值，会重新建一个文件-->
                <maxFileSize>10 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 -->
            <maxHistory>30</maxHistory>
            <!-- 日志总保存量为10MB 超过则删除-->
            <totalSizeCap>50 MB</totalSizeCap>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印DEBUG日志 -->
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--文件输出的格式设置 -->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [ %thread ] - [ %-5level ] [ %logger{96} : %line ] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${contextName}-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大10KB 超过最大值，会重新建一个文件-->
                <maxFileSize>10 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 -->
            <maxHistory>30</maxHistory>
            <!-- 日志总保存量为10MB 超过则删除-->
            <totalSizeCap>50 MB</totalSizeCap>
        </rollingPolicy>
        <!--LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印DEBUG日志 -->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--控制台输出的格式设置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 控制台输出的日志 的格式 -->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [ %thread ] - [ %-5level ] [ %logger{96} : %line ] - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 只是DEBUG级别以上的日志才显示 -->
        <!--ThresholdFilter：临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 子节点向上级传递 局部日志级别-->
    <!--一旦我们在logger中指定了appender-ref 在root中也指定了appender-ref 且两个一样，就会导致日志打印两次，要么appender-ref只在一个中配置，要么添加additivity="false"为false-->
    <logger name="org.springframework" level="INFO"/>
    <!--com.alibaba.dubbo是dubbo服务的包，在如何是info以下的级别会产生大量的启动日志，调成WARN减少日志输出-->
    <logger name="com.alibaba" level="WARN" />

    <!--com.daiyanping.springcloud是本项目的包，把这个包的打印日志级别调成 DEBUG级别可以看到sql执行-->
    <logger name="com.ypdaic.mymall" level="DEBUG"/>
    <logger name="org.redisson" level="INFO"/>
    <logger name="io.netty" level="INFO"/>
    <logger name="io.lettuce" level="INFO"/>
    <logger name="org.thymeleaf" level="INFO"/>

    <!--指定最基础的日志输出级别-->
    <root level="ERROR">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="fileErrorLog"/>
        <appender-ref ref="fileWarnLog"/>
        <appender-ref ref="fileInfoLog"/>
    </root>

</configuration>