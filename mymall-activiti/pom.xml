<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>parent</artifactId>
        <groupId>com.ypdaic.mymall</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>mymall-activiti</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.activiti</groupId>
            <artifactId>activiti-engine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.activiti</groupId>
            <artifactId>activiti-bpmn-model</artifactId>
            <version>7.1.0.M6</version>
        </dependency>
        <dependency>
            <groupId>org.activiti</groupId>
            <artifactId>activiti-spring-boot-starter</artifactId>
            <version>7.1.0.M6</version>
<!--            <exclusions>-->
<!--                <exclusion>-->
<!--                    <groupId>org.springframework.security</groupId>-->
<!--                    <artifactId>spring-security-core</artifactId>-->
<!--                </exclusion>-->
<!--            </exclusions>-->
        </dependency>
        <dependency>
            <groupId>org.activiti</groupId>
            <artifactId>activiti-json-converter</artifactId>
            <version>7.1.0.M6</version>
        </dependency>
        <dependency>
            <groupId>org.activiti</groupId>
            <artifactId>activiti-bpmn-layout</artifactId>
            <version>7.1.0.M6</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!--nacos 服务发现依赖-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <!--                <executions>-->
                <!--                    &lt;!&ndash;将build绑定到maven package生命周期&ndash;&gt;-->
                <!--                    <execution>-->
                <!--                        <id>build-docker-image</id>-->
                <!--                        <phase>package</phase>-->
                <!--                        <goals>-->
                <!--                            <goal>build</goal>-->
                <!--                        </goals>-->
                <!--                    </execution>-->
                <!--                </executions>-->
                <configuration>
                    <forceTags>true</forceTags> <!--覆盖相同标签镜像-->
                    <imageName>mymall/${project.artifactId}:1.0</imageName> <!--指定镜像名称 仓库/镜像名:标签-->
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory> <!--dockerfile文件路径-->
                    <!--<skipDockerBuild>false</skipDockerBuild>-->
                    <!--                    <dockerHost>http://192.168.109.128:2375</dockerHost> &lt;!&ndash; 指定仓库地址 &ndash;&gt;-->
                    <!--<dockerCertPath>C:\Users\Administrator\.docker\machine\machines\default</dockerCertPath>-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--resources.resource.directory：用于指定需要复制的文件的根目录，-->
                            <!--${project.build.directory}表示target目录。-->
                            <directory>${project.build.directory}</directory>
                            <!--resources.resource.include:用于指定需要复制的文件。-->
                            <!--${project.build.finalName}.jar指的是maven编译打包后的jar包。-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                        <port>${order.port}</port>
                    </buildArgs>

                    <!-- 必须与maven配置文件settings.xml中配置的server.id一致，镜像名称就必须指定DockerHub的用户名了，私服就指定ip:port -->
                    <!--                    <serverId>docker-hub</serverId>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!--filtering为true 表示用环境变量替换配置值-->
                <!--filtering为ture,只会将被过滤的文件打到jar中，其他配置
                文件也想要打到jar包中，就必须在配置一个resource-->
                <filtering>true</filtering>
                <!--开启过滤，并对application.yml文件中包含${key}的配置
                将使用maven配置的值进行替换-->
                <!--includes表示只打包指定的文件-->
                <includes>
                    <include>*-${env}.yml</include>
                    <include>application.yml</include>
                    <include>bootstrap.yml</include>
                    <include>bootstrap-${env}.yml</include>
                    <include>redisson-${env}-*.yml</include>
                    <include>redisson-${env}-sentinel-*.yml</include>
                    <include>redisson-${env}-cluster-*.yml</include>
                </includes>
            </resource>

            <resource>
                <directory>src/main/resources</directory>
                <!--filtering为false,表示不过滤文件，但需要排除掉上面我们需要
                过滤的文件-->
                <filtering>false</filtering>
                <excludes>
                    <exclude>*.yml</exclude>
                </excludes>
            </resource>
        </resources>
    </build>



</project>